@page "Test"
@model TimeSlots.Pages.TestModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
	
}
@using TimeSlots.DataBase;
@using System.Text.Json;
@using Newtonsoft.Json;
@using TimeSlots.Model.Enums;
@inject TimeslotsDbContext _context;

<style>
	.container{
		display: grid;
		place-items: center;
		flex-direction: column;
		max-width: 100%;
		margin: 0 auto;
	}
	.dates{
		background: wheat;
		width: auto;
		height: auto;
		display: flex;
		flex-direction: column;
	}
	.days{
		display:flex;
		justify-content: center;
		place-items: center;
	}

	.days__tables {
		display: grid;
		grid-template-columns: 1fr 1fr 1fr;
		grid-template-rows: 10fr 1fr;
		width: 100%;
	}
	table a:link {
		color: #666;
		font-weight: bold;
		text-decoration: none;
	}

	table a:visited {
		color: #999999;
		font-weight: bold;
		text-decoration: none;
	}

	table a:active,
	table a:hover {
		color: #bd5a35;
		text-decoration: underline;
	}

	table {
		font-family: Arial, Helvetica, sans-serif;
		color: #666;
		font-size: 12px;
		text-shadow: 1px 1px 0px #fff;
		background: #eaebec;
		margin: 20px;
		border: #ccc 1px solid;
		-moz-border-radius: 3px;
		-webkit-border-radius: 3px;
		border-radius: 3px;
		-moz-box-shadow: 0 1px 2px #d1d1d1;
		-webkit-box-shadow: 0 1px 2px #d1d1d1;
		box-shadow: 0 1px 2px #d1d1d1;
	}

		table th {
			padding: 21px 25px 22px 25px;
			border-top: 1px solid #fafafa;
			border-bottom: 1px solid #e0e0e0;
			background: #ededed;
			background: -webkit-gradient(linear, left top, left bottom, from(#ededed), to(#ebebeb));
			background: -moz-linear-gradient(top, #ededed, #ebebeb);
		}

			table th:first-child {
				text-align: left;
				padding-left: 20px;
			}

		table tr:first-child th:first-child {
			-moz-border-radius-topleft: 3px;
			-webkit-border-top-left-radius: 3px;
			border-top-left-radius: 3px;
		}

		table tr:first-child th:last-child {
			-moz-border-radius-topright: 3px;
			-webkit-border-top-right-radius: 3px;
			border-top-right-radius: 3px;
		}

		table tr {
			text-align: center;
			padding-left: 20px;
		}

		table td:first-child {
			text-align: left;
			padding-left: 20px;
			border-left: 0;
		}

		table td {
			padding: 18px;
			border-top: 1px solid #ffffff;
			border-bottom: 1px solid #e0e0e0;
			border-left: 1px solid #e0e0e0;
			background: #fafafa;
			background: -webkit-gradient(linear, left top, left bottom, from(#fbfbfb), to(#fafafa));
			background: -moz-linear-gradient(top, #fbfbfb, #fafafa);
		}

		table tr.even td {
			background: #f6f6f6;
			background: -webkit-gradient(linear, left top, left bottom, from(#f8f8f8), to(#f6f6f6));
			background: -moz-linear-gradient(top, #f8f8f8, #f6f6f6);
		}

		table tr:last-child td {
			border-bottom: 0;
		}

			table tr:last-child td:first-child {
				-moz-border-radius-bottomleft: 3px;
				-webkit-border-bottom-left-radius: 3px;
				border-bottom-left-radius: 3px;
			}

			table tr:last-child td:last-child {
				-moz-border-radius-bottomright: 3px;
				-webkit-border-bottom-right-radius: 3px;
				border-bottom-right-radius: 3px;
			}

		table tr:hover td {
			background: #f2f2f2;
			background: -webkit-gradient(linear, left top, left bottom, from(#f2f2f2), to(#f0f0f0));
			background: -moz-linear-gradient(top, #f2f2f2, #f0f0f0);
		}
</style>
<script>
	var selectedTimeslots = [];
	document.addEventListener("DOMContentLoaded", function () {
		var checkboxes = document.getElementsByClassName("timeslot-checkbox");
		var reserveButton = document.getElementById("btnReserve");

		function updateSelectedTimeslots() {
			selectedTimeslots = Array.from(checkboxes).reduce(function (acc, checkbox) {
				var date = checkbox.dataset.date;
				var start = checkbox.dataset.start;
				var end = checkbox.dataset.end;
				var taskType = checkbox.dataset.taskType;

				if (checkbox.checked) {
					acc.push({ Date: date, Start: start, End: end, TaskType: taskType });
				} else {
					acc = acc.filter(function (slot) {
						return slot.Date !== date || slot.Start !== start || slot.End !== end || slot.TaskType.toLowerCase() !== taskType.toLowerCase();
					});
				}
				return acc;
			}, []);
		}
		function parseDateTimeString(dateTimeString) {
			// Разбиваем строку по пробелу, чтобы получить дату и время отдельно
			var parts = dateTimeString.split(' ');
			var dateString = parts[0];
			var timeString = parts[1];

			// Разбиваем строку с датой по точкам, чтобы получить день, месяц и год отдельно
			var dateParts = dateString.split('.');
			var day = parseInt(dateParts[0]);
			var month = parseInt(dateParts[1]);
			var year = parseInt(dateParts[2]);

			// Разбиваем строку с временем по двоеточиям, чтобы получить часы и минуты отдельно
			var timeParts = timeString.split(':');
			var hours = parseInt(timeParts[0]);
			var minutes = parseInt(timeParts[1]);

			// Создаем объект Date с указанными значениями
			var date = new Date(year, month - 1, day, hours, minutes, 0, 0);

			var mskOffset = 3; // Сдвиг для Московского времени (в часах)
			date.setHours(date.getHours() + mskOffset);

			// Преобразуем объект Date в строку в формате "0001-01-01T00:00:00"
			var isoString = date.toISOString();

			return isoString;
		}
		async function reserveButtonClicked() {
			updateSelectedTimeslots();

			for (var i = 0; i < selectedTimeslots.length; i++) {
				var timeslot = selectedTimeslots[i];
				//console.log('before')
				//console.log(timeslot)
				timeslot.Date = parseDateTimeString(timeslot.Date)
				timeslot.Start = parseDateTimeString(timeslot.Start)
				timeslot.End = parseDateTimeString(timeslot.End)
				console.log('after')
				console.log(timeslot)
				try {
					// Отправляем каждый выбранный таймслот отдельно на сервер
					var response = await fetch("/settimeslots", {
						method: "POST",
						headers: {
							"Content-Type": "application/json"
						},
						body: JSON.stringify(timeslot)
					});

					if (response.ok) {
						console.log("Таймслот успешно забронирован!");
					} else {
						console.error("Ошибка при отправке таймслота на сервер.");
					}
				} catch (error) {
					console.error("Ошибка при выполнении запроса:", error);
				}
			}
		}

		for (var i = 0; i < checkboxes.length; i++) {
			checkboxes[i].addEventListener("click", updateSelectedTimeslots);
		}

		reserveButton.addEventListener("click", reserveButtonClicked);
	});
</script>
<div class="container">
	<form method="post" asp-antiforgery="true">
		<p>
			<label asp-for="@Model.Date">Date</label><br/>
			<input type="date" asp-for="@Model.Date" />
		</p>
		<p>
			<label asp-for="@Model.TaskType">TaskType</label><br />
			<select asp-for="@Model.TaskType">
				@foreach (var taskType in Enum.GetValues(typeof(TaskType)))
				{
					<option value="@taskType">@taskType</option>
				}
			</select>
		</p>
		<p>
			<label asp-for="@Model.Pallets">Pallets</label><br />
			<input type="number" asp-for="@Model.Pallets" />
		</p>
		<input type="submit" value="Submit"/>
	</form>
	
	<div class="days">
		@if (Model.Timeslots.Keys.Any())
		{
			<form method="post" class="days__tables">
				@foreach (var date in Model.Timeslots.Keys)
				{
					<table class="table">
						<thead>
							<tr>
								<th>@date.ToShortDateString()</th>
								<th>From</th>
								<th>To</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var timeslot in Model.Timeslots[date])
							{
								<tr>
									<td>@timeslot.Date.ToShortDateString()</td>
									<td>@timeslot.Start.ToString()</td>
									<td>@timeslot.End.ToString()</td>
									<td>
										<input type="checkbox"
											   class="timeslot-checkbox"
											   data-date="@timeslot.Date"
											   data-start="@timeslot.Start"
											   data-end="@timeslot.End"
											   data-taskType="@((int)timeslot.TaskType))" />
									</td>
								</tr>
							}
						</tbody>
					</table>
				}
				<button type="button" id="btnReserve" style="grid-column: 2;">Забронировать</button>
			</form>
		}
		else
		{
			<p>No timeslots available for the selected date.</p>
		}
	</div>
</div>

