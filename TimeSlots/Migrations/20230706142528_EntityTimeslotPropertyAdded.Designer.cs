// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeSlots.DataBase;

#nullable disable

namespace TimeSlots.Migrations
{
    [DbContext(typeof(TimeslotsDbContext))]
    [Migration("20230706142528_EntityTimeslotPropertyAdded")]
    partial class EntityTimeslotPropertyAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("TimeSlots.Model.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0cea26e2-bfa5-48d9-9ac3-69f5b697f43f"),
                            Name = "Company A",
                            PlatformId = new Guid("6753ddab-c262-4528-ace6-c6471d20aef6")
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.Gate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Gates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aed76816-a08d-486f-9f22-f671eca2767f"),
                            Number = 3,
                            PlatformId = new Guid("6753ddab-c262-4528-ace6-c6471d20aef6")
                        },
                        new
                        {
                            Id = new Guid("9ac7306d-1979-4ade-abaa-7b157702fdca"),
                            Number = 13,
                            PlatformId = new Guid("6753ddab-c262-4528-ace6-c6471d20aef6")
                        },
                        new
                        {
                            Id = new Guid("cb7d29f1-6307-4b79-aba7-ad74d5798004"),
                            Number = 12,
                            PlatformId = new Guid("6753ddab-c262-4528-ace6-c6471d20aef6")
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.GateSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DaysOfWeekString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskTypesString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("GateId");

                    b.ToTable("GateSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bb2b061-fd79-4622-a7a3-ce97a3e4a576"),
                            CompanyId = new Guid("0cea26e2-bfa5-48d9-9ac3-69f5b697f43f"),
                            DaysOfWeekString = "Sunday,Monday,Tuesday",
                            From = "12:00:00",
                            GateId = new Guid("aed76816-a08d-486f-9f22-f671eca2767f"),
                            TaskTypesString = "Loading,Unloading,Transfer",
                            To = "18:00:00"
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6753ddab-c262-4528-ace6-c6471d20aef6"),
                            Name = "FTC-1"
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.Timeslot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("From")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GateId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("To")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GateId");

                    b.ToTable("Timeslots");
                });

            modelBuilder.Entity("TimeSlots.Model.Company", b =>
                {
                    b.HasOne("TimeSlots.Model.Platform", null)
                        .WithMany("Companies")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.Gate", b =>
                {
                    b.HasOne("TimeSlots.Model.Platform", null)
                        .WithMany("Gates")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.GateSchedule", b =>
                {
                    b.HasOne("TimeSlots.Model.Company", null)
                        .WithOne("GateSchedule")
                        .HasForeignKey("TimeSlots.Model.GateSchedule", "CompanyId");

                    b.HasOne("TimeSlots.Model.Gate", null)
                        .WithMany("GateSchedules")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.Timeslot", b =>
                {
                    b.HasOne("TimeSlots.Model.Gate", null)
                        .WithMany("Timeslots")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.Company", b =>
                {
                    b.Navigation("GateSchedule")
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.Gate", b =>
                {
                    b.Navigation("GateSchedules");

                    b.Navigation("Timeslots");
                });

            modelBuilder.Entity("TimeSlots.Model.Platform", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Gates");
                });
#pragma warning restore 612, 618
        }
    }
}
