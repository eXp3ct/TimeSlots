// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeSlots.DataBase;

#nullable disable

namespace TimeSlots.Migrations
{
    [DbContext(typeof(TimeslotsDbContext))]
    [Migration("20230705131357_EntityCompanyAndGateScheduleConfigurationAdded")]
    partial class EntityCompanyAndGateScheduleConfigurationAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("TimeSlots.Model.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a28f6e43-97fb-4015-bd58-d07818e83796"),
                            Name = "Company A",
                            PlatformId = new Guid("8de9fe12-3c5c-4e89-b76a-541c7c212ffd")
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.Gate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Gates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff6bf823-768c-47ac-9d1c-c2b9cc41af5d"),
                            Number = 4,
                            PlatformId = new Guid("8de9fe12-3c5c-4e89-b76a-541c7c212ffd")
                        },
                        new
                        {
                            Id = new Guid("52340c69-51d7-467b-be1f-885850902380"),
                            Number = 3,
                            PlatformId = new Guid("8de9fe12-3c5c-4e89-b76a-541c7c212ffd")
                        },
                        new
                        {
                            Id = new Guid("49801c31-3f5e-4b4b-acf4-c575bb3c4418"),
                            Number = 8,
                            PlatformId = new Guid("8de9fe12-3c5c-4e89-b76a-541c7c212ffd")
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.GateSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DaysOfWeekString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskTypesString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("GateId");

                    b.ToTable("GateSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a218786-1c90-4296-9219-c91a735fad83"),
                            CompanyId = new Guid("a28f6e43-97fb-4015-bd58-d07818e83796"),
                            DaysOfWeekString = "Sunday,Monday,Tuesday",
                            From = "12:00:00",
                            GateId = new Guid("ff6bf823-768c-47ac-9d1c-c2b9cc41af5d"),
                            TaskTypesString = "Loading,Unloading,Transfer",
                            To = "18:00:00"
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8de9fe12-3c5c-4e89-b76a-541c7c212ffd"),
                            Name = "FTC-1"
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.Timeslot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GateId");

                    b.ToTable("Timeslots");
                });

            modelBuilder.Entity("TimeSlots.Model.Company", b =>
                {
                    b.HasOne("TimeSlots.Model.Platform", null)
                        .WithMany("Companies")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.Gate", b =>
                {
                    b.HasOne("TimeSlots.Model.Platform", null)
                        .WithMany("Gates")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.GateSchedule", b =>
                {
                    b.HasOne("TimeSlots.Model.Company", null)
                        .WithOne("GateSchedule")
                        .HasForeignKey("TimeSlots.Model.GateSchedule", "CompanyId");

                    b.HasOne("TimeSlots.Model.Gate", null)
                        .WithMany("GateSchedules")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.Timeslot", b =>
                {
                    b.HasOne("TimeSlots.Model.Gate", "Gate")
                        .WithMany("Timeslots")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gate");
                });

            modelBuilder.Entity("TimeSlots.Model.Company", b =>
                {
                    b.Navigation("GateSchedule")
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.Gate", b =>
                {
                    b.Navigation("GateSchedules");

                    b.Navigation("Timeslots");
                });

            modelBuilder.Entity("TimeSlots.Model.Platform", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Gates");
                });
#pragma warning restore 612, 618
        }
    }
}
