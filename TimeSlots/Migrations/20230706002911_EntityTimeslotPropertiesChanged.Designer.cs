// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeSlots.DataBase;

#nullable disable

namespace TimeSlots.Migrations
{
    [DbContext(typeof(TimeslotsDbContext))]
    [Migration("20230706002911_EntityTimeslotPropertiesChanged")]
    partial class EntityTimeslotPropertiesChanged
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("TimeSlots.Model.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86a9a685-09f0-4d99-998e-4fa4af6d4f82"),
                            Name = "Company A",
                            PlatformId = new Guid("72fc8c4c-45b5-4a1e-aaff-9cb8dfea9796")
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.Gate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Gates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c47ee63-4c54-4881-8938-4ed30eb56699"),
                            Number = 5,
                            PlatformId = new Guid("72fc8c4c-45b5-4a1e-aaff-9cb8dfea9796")
                        },
                        new
                        {
                            Id = new Guid("96a21fcb-67b9-4768-b8c2-9664d7b7823b"),
                            Number = 18,
                            PlatformId = new Guid("72fc8c4c-45b5-4a1e-aaff-9cb8dfea9796")
                        },
                        new
                        {
                            Id = new Guid("43255c1e-172a-4167-b3c4-763f2835cfd8"),
                            Number = 4,
                            PlatformId = new Guid("72fc8c4c-45b5-4a1e-aaff-9cb8dfea9796")
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.GateSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DaysOfWeekString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskTypesString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("GateId");

                    b.ToTable("GateSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4eb080aa-48a7-4863-a690-eda2fcb02b33"),
                            CompanyId = new Guid("86a9a685-09f0-4d99-998e-4fa4af6d4f82"),
                            DaysOfWeekString = "Sunday,Monday,Tuesday",
                            From = "12:00:00",
                            GateId = new Guid("0c47ee63-4c54-4881-8938-4ed30eb56699"),
                            TaskTypesString = "Loading,Unloading,Transfer",
                            To = "18:00:00"
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72fc8c4c-45b5-4a1e-aaff-9cb8dfea9796"),
                            Name = "FTC-1"
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.Timeslot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("From")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GateId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("To")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GateId");

                    b.ToTable("Timeslots");
                });

            modelBuilder.Entity("TimeSlots.Model.Company", b =>
                {
                    b.HasOne("TimeSlots.Model.Platform", null)
                        .WithMany("Companies")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.Gate", b =>
                {
                    b.HasOne("TimeSlots.Model.Platform", null)
                        .WithMany("Gates")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.GateSchedule", b =>
                {
                    b.HasOne("TimeSlots.Model.Company", null)
                        .WithOne("GateSchedule")
                        .HasForeignKey("TimeSlots.Model.GateSchedule", "CompanyId");

                    b.HasOne("TimeSlots.Model.Gate", null)
                        .WithMany("GateSchedules")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.Timeslot", b =>
                {
                    b.HasOne("TimeSlots.Model.Gate", null)
                        .WithMany("Timeslots")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.Company", b =>
                {
                    b.Navigation("GateSchedule")
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.Gate", b =>
                {
                    b.Navigation("GateSchedules");

                    b.Navigation("Timeslots");
                });

            modelBuilder.Entity("TimeSlots.Model.Platform", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Gates");
                });
#pragma warning restore 612, 618
        }
    }
}
