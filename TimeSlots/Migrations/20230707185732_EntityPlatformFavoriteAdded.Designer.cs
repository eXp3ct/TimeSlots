// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeSlots.DataBase;

#nullable disable

namespace TimeSlots.Migrations
{
    [DbContext(typeof(TimeslotsDbContext))]
    [Migration("20230707185732_EntityPlatformFavoriteAdded")]
    partial class EntityPlatformFavoriteAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("TimeSlots.Model.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f13e9549-9b98-46fb-b696-a990432e2710"),
                            Name = "Company A",
                            PlatformId = new Guid("4e36a5cf-4c0a-4217-89a8-13588a42223c")
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.Gate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Gates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("750c50de-84b1-44b1-955b-a31947624107"),
                            Number = 9,
                            PlatformId = new Guid("4e36a5cf-4c0a-4217-89a8-13588a42223c")
                        },
                        new
                        {
                            Id = new Guid("60cb1060-75c8-4dfd-b916-bfb59f8c3dfa"),
                            Number = 2,
                            PlatformId = new Guid("4e36a5cf-4c0a-4217-89a8-13588a42223c")
                        },
                        new
                        {
                            Id = new Guid("6fe3698a-df14-4fc3-834c-decaf5b0a6bb"),
                            Number = 18,
                            PlatformId = new Guid("4e36a5cf-4c0a-4217-89a8-13588a42223c")
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.GateSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DaysOfWeekString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskTypesString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("GateId");

                    b.ToTable("GateSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ccb98cc-d9ec-43e4-a345-bce3e3b023a6"),
                            CompanyId = new Guid("f13e9549-9b98-46fb-b696-a990432e2710"),
                            DaysOfWeekString = "Sunday,Monday,Tuesday",
                            From = new TimeSpan(0, 12, 0, 0, 0),
                            GateId = new Guid("750c50de-84b1-44b1-955b-a31947624107"),
                            TaskTypesString = "Loading,Unloading,Transfer",
                            To = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ddbf481e-7415-4961-afeb-08b7f008f9f1"),
                            DaysOfWeekString = "Wednesday,Thursday",
                            From = new TimeSpan(0, 9, 30, 0, 0),
                            GateId = new Guid("6fe3698a-df14-4fc3-834c-decaf5b0a6bb"),
                            TaskTypesString = "Loading",
                            To = new TimeSpan(0, 15, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e36a5cf-4c0a-4217-89a8-13588a42223c"),
                            Name = "FTC-1"
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.PlatformFavorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DaysOfWeekString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxTaskCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskTypesString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PlatformId");

                    b.ToTable("PlatformFavorites");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b005f22-bddb-432f-ba82-a1364d4377f2"),
                            CompanyId = new Guid("f13e9549-9b98-46fb-b696-a990432e2710"),
                            DaysOfWeekString = "Monday,Tuesday,Wednesday",
                            From = new TimeSpan(0, 12, 0, 0, 0),
                            MaxTaskCount = 1,
                            PlatformId = new Guid("4e36a5cf-4c0a-4217-89a8-13588a42223c"),
                            TaskTypesString = "Unloading",
                            To = new TimeSpan(0, 18, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("TimeSlots.Model.Timeslot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("From")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GateId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("To")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GateId");

                    b.ToTable("Timeslots");
                });

            modelBuilder.Entity("TimeSlots.Model.Company", b =>
                {
                    b.HasOne("TimeSlots.Model.Platform", null)
                        .WithMany("Companies")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.Gate", b =>
                {
                    b.HasOne("TimeSlots.Model.Platform", null)
                        .WithMany("Gates")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.GateSchedule", b =>
                {
                    b.HasOne("TimeSlots.Model.Company", null)
                        .WithOne("GateSchedule")
                        .HasForeignKey("TimeSlots.Model.GateSchedule", "CompanyId");

                    b.HasOne("TimeSlots.Model.Gate", null)
                        .WithMany("GateSchedules")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.PlatformFavorite", b =>
                {
                    b.HasOne("TimeSlots.Model.Company", null)
                        .WithMany("PlatformFavorites")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeSlots.Model.Platform", null)
                        .WithMany("PlatformFavorites")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.Timeslot", b =>
                {
                    b.HasOne("TimeSlots.Model.Gate", null)
                        .WithMany("Timeslots")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeSlots.Model.Company", b =>
                {
                    b.Navigation("GateSchedule")
                        .IsRequired();

                    b.Navigation("PlatformFavorites");
                });

            modelBuilder.Entity("TimeSlots.Model.Gate", b =>
                {
                    b.Navigation("GateSchedules");

                    b.Navigation("Timeslots");
                });

            modelBuilder.Entity("TimeSlots.Model.Platform", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Gates");

                    b.Navigation("PlatformFavorites");
                });
#pragma warning restore 612, 618
        }
    }
}
